import pygame
import random
# 기본 초기화 (반드시 해야하는 것들)
pygame.init()

# 화면 크기 설정
screen_width = 480 #가로 크기
screen_height = 640 #세로 크기
screen = pygame.display.set_mode((screen_width, screen_height))

# 화면 타이틀 설정
pygame.display.set_caption("Avoid Poop")

# FPS
clock = pygame.time.Clock()

# 1. 사용자 게임 초기화 (배경 화면, 게임 이미지 , 좌표, 속도, 폰트)
# 배경 이미지 불러오기
background = pygame.image.load("C:/doit/Vscode/pygame_basic/paperbackground.jpg")
# 캐릭터 이미지 불러오기
character = pygame.image.load("C:/doit/Vscode/pygame_basic/dancer.png")
character_size = character.get_rect().size # 캐릭터의 이미지를 구해옴
character_width = character_size[0] # 캐릭터의 가로크기
character_height = character_size[1] #캐릭터의 세로크기
character_x_pos = (screen_width/2) - (character_width/2) # 화면 가로의 중앙에 해당하는 곳에 위치
character_y_pos = screen_height - character_height # 화면 세로크기의 가장 아래에 위치

# 이동할 좌표
to_x = 0

# 이동 속도
character_speed = 0.3

# 적 enemy 캐릭터
poop = pygame.image.load("C:/doit/Vscode/pygame_basic/poop.png")
poop_size = poop.get_rect().size # 캐릭터의 이미지를 구해옴
poop_width = poop_size[0] # 캐릭터의 가로 크기
poop_height = poop_size[1] # 캐릭터의 세로 크기
poop_x_pos = random.randint(0, screen_width - poop_width)
poop_y_pos = 0
poop_speed = 0.3

ddong = pygame.image.load("C:/doit/Vscode/pygame_basic/poop.png")
ddong_size = ddong.get_rect().size # 캐릭터의 이미지를 구해옴
ddong_width = ddong_size[0] # 캐릭터의 가로 크기
ddong_height = ddong_size[1] # 캐릭터의 세로 크기
ddong_x_pos = random.randint(0, screen_width - ddong_width)
ddong_y_pos = 0
ddong_speed = 0.1

# 폰트 정의
game_font = pygame.font.Font(None, 40) # 폰트 객체 생성 (폰트, 크기)

# 총 시간
total_time = 60

# 시작 시간
start_ticks = pygame.time.get_ticks() # 현재 tick을 받아옴

# 이벤트 루프
running = True 
while running:
  dt = clock.tick(30) # 게임화면의 초당 프레임 수를 설정

  # 2. 이벤트 처리 (키보드, 마우스 등)
  for event in pygame.event.get():
    if event.type == pygame.QUIT:
      running = False
    if event.type == pygame.KEYDOWN: # 키가 눌러졌는지 확인
      if event.key == pygame.K_LEFT: # 캐릭터를 왼쪽으로
        to_x -= character_speed
      elif event.key == pygame.K_RIGHT: # 캐릭터를 오른쪽으로
        to_x += character_speed
    
    if event.type == pygame.KEYUP: # 방향키를 떼면 멈춤
      if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
        to_x=0
        
  # 3. 게임 캐릭터 위치 정의
  character_x_pos += to_x * dt
  
  # 가로 경계값 처리
  if character_x_pos < 0:
    character_x_pos = 0
  elif character_x_pos > screen_width - character_width:
    character_x_pos = screen_width - character_width
  
  poop_y_pos += poop_speed * dt
  if poop_y_pos > screen_height:
    poop_y_pos = 0
    poop_x_pos = random.randint(0, screen_width - poop_width)
    
  poop_y_pos2 += poop_speed2 * dt
  if poop_y_pos2 > screen_height:
    poop_y_pos2 = 0
    poop_x_pos2 = random.randint(0, screen_width - poop_width)

  # 4. 충돌 처리
  character_rect = character.get_rect()
  character_rect.left = character_x_pos
  character_rect.top = character_y_pos
  
  poop_rect = poop.get_rect()
  poop_rect.left = poop_x_pos
  poop_rect.top = poop_y_pos
  
  poop_rect2 = poop2.get_rect()
  poop_rect2.left = poop_x_pos2
  poop_rect2.top = poop_y_pos2
  
  if character_rect.colliderect(poop_rect):
    print('충돌했어요')
    running = False
  if character_rect.colliderect(poop_rect2):
    print('충돌했어요')
    running = False
  
  # 5. 화면에 그리기
  screen.blit(background, (0,0)) # 배경 그리기
  screen.blit(character, (character_x_pos, character_y_pos)) # 캐릭터 그리기
  screen.blit(poop, (poop_x_pos, poop_y_pos)) # 적 그리기
  screen.blit(poop2, (poop_x_pos, poop_y_pos2))
  
  # 타이머 집어 넣기
  # 경과 시간 계산
  elapsed_time = (pygame.time.get_ticks() - start_ticks) / 1000
  # 경과 시간을(ms) 1000으로 나누어서 초(s) 단위로 표시
  
  timer = game_font.render(str(int(total_time - elapsed_time)), True, (255,255,255))
  screen.blit(timer, (10,10))
  
  if total_time - elapsed_time <= 0:
    print("승리했습니다")
    running = False
  
  pygame.display.update() # 게임 화면을 다시 그리기!


pygame.quit()
